#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# Description: Build Kernel using GitHub Actions
# Change from P3TERX
#

name: Openeuler Kernel ARM64 5.10 latest by MacOS

on:
  workflow_dispatch:
  schedule:
    - cron: "36 19 * * 2,6"
   # inputs:
    #  ssh:
     #   description: 'SSH connection to Actions'
      #  required: false
       # default: 'false'

env:
  UPLOAD_DIR: true
  UPLOAD_RELEASE: true
  UPLOAD_WETRANSFER: false
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: macos-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sysctl -a | grep machdep.cpu
        mkdir workdir
        mkdir workdir/upload
        chown $USER:$GROUPS ./workdir
        chown $USER:$GROUPS ./workdir/upload
        brew install dpkg
        brew install openssl
        brew install libelf
        brew install spinlocklabs/mac-linux-kdk/mac-linux-kdk
        brew tap messense/macos-cross-toolchains
        brew install x86_64-unknown-linux-gnu
        brew install aarch64-unknown-linux-gnu
  
    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: Get source code && Compile the kernel
      id: compile
      working-directory: ./workdir
      run: |
        df -hT $PWD
        kernel_file=$(curl -s https://www.kernel.org/ | grep tarball | grep 5.10 | awk -F '"' '{print $2}')
        kernel_ver=$(curl -s https://www.kernel.org/ | grep tarball | grep 5.10 | awk -F '"' '{print $2}' | awk -F 'linux-' '{print $2}' | awk -F '.tar.xz' '{print $1}')
        wget -O kernel.tar.xz $kernel_file
        tar -Jxvf kernel.tar.xz && cd ./linux-$kernel_ver
        wget -O openeuler_defconfig https://raw.githubusercontent.com/opsiff/kernel/master/arm64openeuler_defconfig
        cp openeuler_defconfig ./arch/arm64/configs/openeuler_defconfig
        lkmake ARCH=arm64  CC=clang CROSS_COMPILE=aarch64-linux-gnu- openeuler_defconfig CONFIGURE_OPTS="--with-openssl=$(brew --prefix openssl)"
        echo -e "$(nproc) thread compile"
        sudo time lkmake ARCH=arm64  CC=clang CROSS_COMPILE=aarch64-linux-gnu- -j$(($(nproc) + 1)) CONFIGURE_OPTS="--with-openssl=$(brew --prefix openssl)"
        cd .. && mv *.deb ./upload
        echo "::set-output name=status::success"
        echo "FILE_DATE=Kernel_Openeuler_$kernel_ver_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV   
    - name: Check space usage
      if: (!cancelled()) && steps.compile.outputs.status == 'success'
      run: df -hT

    - name: Upload
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_DIR == 'true'
      with:
        name: ${{ env.FILE_DATE }}
        path: ./workdir/upload
        
    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && steps.compile.outputs.status == 'success' && !cancelled()
      run: |
        kernel_ver=$(curl -s https://www.kernel.org/ | grep tarball | grep 5.10 | awk -F '"' '{print $2}' | awk -F 'linux-' '{print $2}' | awk -F '.tar.xz' '{print $1}')
        echo "::set-output name=release_tag::Openeuler_Kernel_${kernel_ver}_latest_arm64_$(date +"%Y.%m.%d-%H%M")"
        touch release.txt
        echo "::set-output name=status::success"
    - name: Upload kernel to release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ./workdir/upload/*
